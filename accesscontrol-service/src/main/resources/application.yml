server:
  port: 8082
spring:
  application:
    name: accesscontrol-service
#Kafka
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            type:
              mapping: event:com.tpa.useraccessservice.event.LogEvent
#keycloak
keycloak:
  realm: ${KEYCLOAK_REALM}
  auth-server-url: http://localhost:8181
  ssl-required: external
  resource: ${KEYCLOAK_RESOURCE}
  credentials:
    secret: ${KEYCLOAK_SECRET}
  use-resource-role-mappings: true
  bearer-only: true

management:
  tracing:
    sampling:
      probability: 1.0
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always


resilience4j.circuitbreaker:
  configs:
    default:
      registerHealthIndicator: true
      slidingWindowSize: 5
      slidingWindowType: COUNT_BASED
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      waitDurationInOpenState: 5s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
      recordExceptions:
        - java.io.IOException

  instances:
    user-service:
      baseConfig: default

resilience4j.timelimiter:
  configs:
    default:
      timeoutDuration: 3s
  instances:
    user-service:
      baseConfig: default

resilience4j.retry:
  configs:
    default:
      max-attempts: 3
      wait-duration: 5s
  instances:
    user-service:
      baseConfig: default

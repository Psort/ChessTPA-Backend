---
version: '3.7'
services:

  keycloak-postgres:
    container_name: keycloak-postgres
    image: postgres
    volumes:
      - ./postgres_keycloak_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${POSTGRES_KEYCLOAK_USER}
      POSTGRES_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
    env_file:
      - .env

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:23.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: ${POSTGRES_KEYCLOAK_USER}
      DB_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    env_file:
      - .env
    ports:
      - "8188:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-postgres

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-oss:10.2.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "4000:4000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER = ${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD = ${GF_SECURITY_ADMIN_PASSWORD}
    env_file:
      - .env

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-data:/data/db

  postgres-user:
    container_name: postgres-user
    image: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_USER_DB}
      POSTGRES_USER: ${POSTGRES_USER_USER}
      POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
      PGDATA: /data/postgres
    env_file:
      - .env
    volumes:
      - ./postgres-user:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: always

  ##Eureka Server
  discovery-server:
    image: registry.hub.docker.com/tymsztrumpf/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"

  ##Api GATeWay
  api-gateway:
    image: registry.hub.docker.com/tymsztrumpf/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
    depends_on:
      - discovery-server


  accesscontrol-service:
    image: registry.hub.docker.com/tymsztrumpf/accesscontrol-service:latest
    container_name: accesscontrol-service
    ports:
      - "8082:8082"
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
    depends_on:
      - discovery-server

  user-service:
    image: registry.hub.docker.com/tymsztrumpf/user-service:latest
    container_name: user-service
    ports:
      - "8083:8083"
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
      - "SPRING_DATASOURCE_URL=${USER_DB_URL}"
      - "SPRING_DATASOURCE_USERNAME=${USER_DB_USERNAME}"
      - "SPRING_DATASOURCE_PASSWORD=${USER_DB_PASSWORD}"
    env_file:
      - .env
    depends_on:
      - discovery-server
      - api-gateway
      - accesscontrol-service
      - postgres-user

  chessengine-service:
    image: registry.hub.docker.com/tymsztrumpf/chessengine-service:latest
    container_name: chessengine-service
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
    ports:
      - "8084:8084"
    depends_on:
      - discovery-server
      - api-gateway

  game-service:
    image: registry.hub.docker.com/tymsztrumpf/game-service:latest
    container_name: game-service
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
    ports:
      - "8085:8085"
    depends_on:
      - mongo
      - discovery-server
      - api-gateway
      - chessengine-service

  queue-service:
    image: registry.hub.docker.com/tymsztrumpf/queue-service:latest
    container_name: queue-service
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
    ports:
      - "8086:8086"
    depends_on:
      - api-gateway
      - discovery-server
      - broker

  websocket-service:
    image: registry.hub.docker.com/tymsztrumpf/websocket-service:latest
    container_name: websocket-service
    environment:
      - "SPRING_PROFILES_ACTIVE=docker"
    ports:
      - "8087:8087"
    depends_on:
      - api-gateway
      - discovery-server